generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String         @id @default(uuid())
  userName     String         @unique
  password     String
  securityCode Int
  adminImg     String?
  role         AdminRoleEnum? @default(admin)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Blog         Blog[]
  Work         Work[]
  Founder      Founder[]
  TeamMember   TeamMember[]
  Service      Service[]

  @@map("admins")
}

enum AdminRoleEnum {
  super_admin
  admin
}

model Blog {
  id          String   @id @default(uuid())
  blogTitle   String
  blogContent String
  blogImg     String?
  blogStatus  Boolean? @default(true)
  author      Admin    @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blogs")
}

model Category {
  id                  String    @id @default(uuid())
  categoryTitle       String
  categoryDescription String
  categoryImg         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  Service             Service[]

  @@map("categories")
}

model Service {
  id           String   @id @default(uuid())
  serviceTitle String
  serviceImg     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  author       Admin    @relation(fields: [authorId], references: [id])
  authorId     String

  @@map("services")
}

model Work {
  id          String   @id @default(uuid())
  title       String
  description String
  workImg     String?
  author      Admin    @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("works")
}

model TeamMember {
  id            String   @id @default(uuid())
  name          String
  teamPersonImg String?
  designation   String
  linkedin      String?
  github        String?
  email         String?
  portfolio     String?
  author        Admin    @relation(fields: [authorId], references: [id])
  authorId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("team-members")
}

model Founder {
  id               String   @id @default(uuid())
  name             String
  designation      String
  founderPersonImg String?
  linkedin         String?
  github           String?
  email            String?
  portfolio        String?
  author           Admin    @relation(fields: [authorId], references: [id])
  authorId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("founders")
}

model EmailRecord {
  id        String   @id @default(uuid())
  email     String
  name      String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_records")
}

model Visitor {
  id           String   @id @default(uuid())
  ip           String
  browser_name String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("visitors")
}
